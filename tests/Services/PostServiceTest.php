<?php

namespace Tests\Services;

use App\Services\IPostService;
use App\Utils\PostTypeEnum;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class PostServiceTest extends TestCase
{
    private IPostService $service;
    private array $post;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::connection(env('DB_CONNECTION'))->delete("DELETE FROM posts");
        $this->service = $this->app->make(IPostService::class);
        $this->post = [
            "type" => PostTypeEnum::POST_TILE_TYPE,
            "title" => "Post Service Title",
            "desc" => "Post Service Desc",
            "user_id" => "4b219426-b0fc-4183-bfc4-902b72a34630"
        ];
    }

    public function testAddPostSuccess()
    {
        $request = $this->post;
        $addedPost = $this->service->addPost($request);

        self::assertNotNull($addedPost);
        self::assertSame($request['title'], $addedPost->title);
        self::assertSame($request['desc'], $addedPost->desc);
        self::assertSame($request['user_id'], $addedPost->user->id);
    }

    public function testGetPostSuccess()
    {
        $request = $this->post;
        $addedPost = $this->service->addPost($request);
        $postById = $this->service->getPostById($addedPost['id']);

        self::assertNotNull($postById->id);
        self::assertSame($request['title'], $postById->title);
        self::assertSame($request['desc'], $postById->desc);
        self::assertSame($request['user_id'], $postById->user->id);
    }

    public function testUpdatePostSuccess()
    {
        $request = $this->post;
        $addedPost = $this->service->addPost($request);

        $requestUpdate = $this->post;
        $requestUpdate['title'] = 'Updated Title Post';
        $requestUpdate['desc'] = 'Updated Description Post';

        $updatedPost = $this->service->updatePost($addedPost['id'], $requestUpdate);

        self::assertNotNull($updatedPost->id);
        self::assertSame($requestUpdate['title'], $updatedPost->title);
        self::assertSame($requestUpdate['desc'], $updatedPost->desc);
        self::assertSame($requestUpdate['user_id'], $updatedPost->user->id);
    }

    public function testRemovePostSuccess()
    {
        $request = $this->post;
        $addedPost = $this->service->addPost($request);

        $isRemovedPost = $this->service->removePost($addedPost['id']);
        self::assertTrue($isRemovedPost);

        $removedPost = $this->service->getPostById($addedPost['id']);
        self::assertNull($removedPost);
    }
}
